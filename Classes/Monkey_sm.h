//  
// ex: set ro:  
// DO NOT EDIT.  
// generated by smc (http://smc.sourceforge.net/)  
// from file : Monkey.sm  
//  

#ifndef MONKEY_SM_H  
#define MONKEY_SM_H  


#define SMC_USES_IOSTREAMS  

#include "statemap.h"  

// Forward declarations.  
class MonkeyMap;
class MonkeyMap_STOP;
class MonkeyMap_WALK;
class MonkeyMap_TURN;
class MonkeyMap_Default;
class MonkeyState;
class MonkeyContext;
class Monkey;

class MonkeyState :
	public statemap::State
{
public:

	MonkeyState(const char * const name, const int stateId)
		: statemap::State(name, stateId)
	{};

	virtual void Entry(MonkeyContext&) {};
	virtual void Exit(MonkeyContext&) {};

	virtual void stop(MonkeyContext& context);
	virtual void turn(MonkeyContext& context);
	virtual void walk(MonkeyContext& context);

protected:

	virtual void Default(MonkeyContext& context);
};

class MonkeyMap
{
public:

	static MonkeyMap_STOP STOP;
	static MonkeyMap_WALK WALK;
	static MonkeyMap_TURN TURN;
};

class MonkeyMap_Default :
	public MonkeyState
{
public:

	MonkeyMap_Default(const char * const name, const int stateId)
		: MonkeyState(name, stateId)
	{};

};

class MonkeyMap_STOP :
	public MonkeyMap_Default
{
public:
	MonkeyMap_STOP(const char * const name, const int stateId)
		: MonkeyMap_Default(name, stateId)
	{};

	virtual void Entry(MonkeyContext&);
	virtual void Exit(MonkeyContext&);
	virtual void walk(MonkeyContext& context);
};

class MonkeyMap_WALK :
	public MonkeyMap_Default
{
public:
	MonkeyMap_WALK(const char * const name, const int stateId)
		: MonkeyMap_Default(name, stateId)
	{};

	virtual void Entry(MonkeyContext&);
	virtual void Exit(MonkeyContext&);
	virtual void stop(MonkeyContext& context);
	virtual void turn(MonkeyContext& context);
};

class MonkeyMap_TURN :
	public MonkeyMap_Default
{
public:
	MonkeyMap_TURN(const char * const name, const int stateId)
		: MonkeyMap_Default(name, stateId)
	{};

	virtual void Entry(MonkeyContext&);
	virtual void Exit(MonkeyContext&);
	virtual void walk(MonkeyContext& context);
};

class MonkeyContext : public statemap::FSMContext
{
public:

	explicit MonkeyContext(Monkey& owner)
		: FSMContext(MonkeyMap::STOP),
		_owner(&owner)
	{};

	MonkeyContext(Monkey& owner, const statemap::State& state)
		: FSMContext(state),
		_owner(&owner)
	{};

	virtual void enterStartState()
	{
		getState().Entry(*this);
	}

	inline Monkey& getOwner()
	{
		return *_owner;
	};

	inline MonkeyState& getState()
	{
		if (_state == NULL)
		{
			throw statemap::StateUndefinedException();
		}

		return dynamic_cast<MonkeyState&>(*_state);
	};

	inline void stop()
	{
		getState().stop(*this);
	};

	inline void turn()
	{
		getState().turn(*this);
	};

	inline void walk()
	{
		getState().walk(*this);
	};

private:

	Monkey* _owner;
};


#endif // MONKEY_SM_H  
//  
// Local variables:  
//  buffer-read-only: t  
// End:  
//