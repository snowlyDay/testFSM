//  
// ex: set ro:  
// DO NOT EDIT.  
// generated by smc (http://smc.sourceforge.net/)  
// from file : Monkey.sm  
//  

#include "Monkey.h"  
#include "Monkey_sm.h"  

using namespace statemap;

// Static class declarations.  
MonkeyMap_STOP MonkeyMap::STOP("MonkeyMap::STOP", 0);
MonkeyMap_WALK MonkeyMap::WALK("MonkeyMap::WALK", 1);
MonkeyMap_TURN MonkeyMap::TURN("MonkeyMap::TURN", 2);

void MonkeyState::stop(MonkeyContext& context)
{
	Default(context);
}

void MonkeyState::turn(MonkeyContext& context)
{
	Default(context);
}

void MonkeyState::walk(MonkeyContext& context)
{
	Default(context);
}

void MonkeyState::Default(MonkeyContext& context)
{
	throw (
		TransitionUndefinedException(
		context.getState().getName(),
		context.getTransition()));

}

void MonkeyMap_STOP::Entry(MonkeyContext& context)

{
	Monkey& ctxt = context.getOwner();

	ctxt.stop();
}

void MonkeyMap_STOP::Exit(MonkeyContext& context)

{
	Monkey& ctxt = context.getOwner();

	ctxt.exit();
}

void MonkeyMap_STOP::walk(MonkeyContext& context)
{

	context.getState().Exit(context);
	context.setState(MonkeyMap::WALK);
	context.getState().Entry(context);

}

void MonkeyMap_WALK::Entry(MonkeyContext& context)

{
	Monkey& ctxt = context.getOwner();

	ctxt.walk();
}

void MonkeyMap_WALK::Exit(MonkeyContext& context)

{
	Monkey& ctxt = context.getOwner();

	ctxt.exit();
}

void MonkeyMap_WALK::stop(MonkeyContext& context)
{

	context.getState().Exit(context);
	context.setState(MonkeyMap::STOP);
	context.getState().Entry(context);

}

void MonkeyMap_WALK::turn(MonkeyContext& context)
{

	context.getState().Exit(context);
	context.setState(MonkeyMap::TURN);
	context.getState().Entry(context);

}

void MonkeyMap_TURN::Entry(MonkeyContext& context)

{
	Monkey& ctxt = context.getOwner();

	ctxt.turn();
}

void MonkeyMap_TURN::Exit(MonkeyContext& context)

{
	Monkey& ctxt = context.getOwner();

	ctxt.exit();
}

void MonkeyMap_TURN::walk(MonkeyContext& context)
{

	context.getState().Exit(context);
	context.setState(MonkeyMap::WALK);
	context.getState().Entry(context);

}

//  
// Local variables:  
//  buffer-read-only: t  
// End:  
//